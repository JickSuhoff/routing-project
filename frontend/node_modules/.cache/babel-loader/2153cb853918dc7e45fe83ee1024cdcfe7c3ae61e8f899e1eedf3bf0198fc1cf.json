{"ast":null,"code":"var _jsxFileName = \"/Users/sergejsuhov/Desktop/routing-project2.0/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { json, useLoaderData, defer, Await } from 'react-router';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadedEvents\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 12\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //return { isError: true, message: 'Could not fetch events.' }\n    //throw new Response(JSON.stringify({ message: 'Could not fetch events' }), { status: 500, });\n    return json({\n      message: 'Could not fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["json","useLoaderData","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadedEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/sergejsuhov/Desktop/routing-project2.0/frontend/src/pages/Events.js"],"sourcesContent":["import { json, useLoaderData, defer, Await } from 'react-router';\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n\n    const { events } = useLoaderData();\n\n    return <Await resolve={events}>\n        {(loadedEvents)}\n    </Await>\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        //return { isError: true, message: 'Could not fetch events.' }\n        //throw new Response(JSON.stringify({ message: 'Could not fetch events' }), { status: 500, });\n        return json({ message: 'Could not fetch events' }, { status: 500 });\n    } else {\n        return response;\n    }\n}\n\nexport function loader() {\n    return defer({\n        events: loadEvents()\n    });\n}"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,aAAa,EAAEC,KAAK,EAAEC,KAAK,QAAQ,cAAc;AAChE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAElB,MAAM;IAAEC;EAAO,CAAC,GAAGR,aAAa,CAAC,CAAC;EAElC,oBAAOK,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED,MAAO;IAAAE,QAAA,EACxBC;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AACZ;AAACR,EAAA,CAPQD,UAAU;EAAA,QAEIN,aAAa;AAAA;AAAAgB,EAAA,GAF3BV,UAAU;AASnB,eAAeA,UAAU;AAEzB,eAAeW,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA,OAAOrB,IAAI,CAAC;MAAEsB,OAAO,EAAE;IAAyB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACvE,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACrB,OAAOtB,KAAK,CAAC;IACTO,MAAM,EAAES,UAAU,CAAC;EACvB,CAAC,CAAC;AACN;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}